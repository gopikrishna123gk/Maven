1) What is Maven and how does it helps in DevOps?

  *) Maven is a build automation tool and it helps DevOps in providing automation around the Build phase of the
   DevOps Life Cycle Management.

2)  What is a Maven Repository?

   *) A Maven repository is the storage place for the entire library jar, project jars and plugins, and all other project artifacts. 
    This can be used by Maven easily.

3) What are the different Maven Plugins?

    There are 2 types of Maven Plugins they are as follows,

     *) Build Plugins – They are executed during the build phase of the DevOps Life Cycle Management and configured through the
       <build/> element of the pom.xml.

    *) Reporting Plugins – They are executed during the site generation and must be configured as <reporting/> element of the pom.xml

4) What are the different types of Maven repository?

   There are 3 different types of Maven repository they are 
       *) central
       *) local
       *) remote

5) What is POM in Maven?

 *) POM stands for Project Object Model. It is the fundamental unit of work in the Maven. It is an XML file. It consists of all the
    information about the projects and the build configuration details used to build the project. It resides in the base directory of 
    the Maven as the pom.xml. 

6) What is a Maven artifact?

  *) A Maven artifact is a file usually a jar that is stored in the Maven repository. It consists of an artifact group ID, an artifact ID, 
    and a version string. The three uniquely form an artifact. The artifacts are called as project dependencies. A Maven build produces  
    one or more such artifacts such as Complied jar and source jars. Explore more with DevOps Learning at StarAgile institute

7) What is Maven Build Life Cycle?

   *) A Maven build life cycle consists of all the defined phases required to execute the goals in the same order as represented
      in the Maven Build Life cycle.

8) What information does POM contain?

   The Project Object Model consists of the following configuration information they are as follows,

         *) Build profiles
         *)  Developers
         *) Goals
         *) Mailing list
         *) Plugins
         *) Project dependencies
         *) Project version 

9)  Name the 3 build life cycles of Maven?

    The 3 build lifecycles of Maven are as follows,

        *)  default or build - This is used to build the application.
        *)  clean - This is used to clean up the artifacts of the previous builds.
        *)  site - This is used to generate the site documentation of the project.

10) What are the phases of a Maven Build Life Cycle?

     The phases of the Maven Build Life Cycle are as follows,

    *) validate - 
       This validates the correctness of the project and ensures all the necessary information is available.
    *) compile - 
       Used to compile the source code of the project
    *) test -
       Used to test the compiled source code with a unit testing framework. This does not require the code to be packaged.
    *) package -
       This is used to packaged the compiled code and package it into a distributable format such as a JAR.
    *) integration-test -
        Used to run integration test on the packaged file
    *) verify -
       run checks on the packaged file is valid and meets the required quality criteria
    *) install -
       install the package into the local repository to be used as a dependency in other projects locally
    *) deploy - 
     used in release environments to deploy copies of the final package to the remote repository for sharing with other
     projects and developers.

 
11) What command is used to quickly build the Maven site?

   The command used is $ MVN.

12) What is Build Profile?

  Using the build profile we can customize build for the different environments such as development or production.
  The build profile is a set of configuration values required to set or override the default maven build 

13) What are the phases of the site life cycle?

    The phases of the site life cycle are as follows,

       *) pre-site
       *) site
       *) post-site
       *) site-deploy

14) What are the different types of Build Profiles?

   Build profiles are of 3 types they are as follows,

     *) Per project - defined in the project POM file, pom.xml
     *) Global - defined in Maven global settings XML file
     *) Per User - defined in Maven settings XML file

15) What are the phases of the clean life cycle?

    The clean life cycle consists of the following phases

      *) pre-clean
      *) clean
      *) post-clean

16) Why are the Maven Plugins used?

    The Maven plugins are used for the following things,

       *) compile code files.
       *) create a jar file.
       *) create project documentation.
       *) create project reports.
       *) create a war file.
       *) unit testing of code.

17) What is the use of the execution element in the pom file?

    The execution element contains information required for the execution of the plugin.

18) What is the command to install the JAR file in the local repository?

      The command to install the JAR file in the local repository is, 
              $ MVN install

19) What are the ways to activate profiles?

    A Maven build profile can be activated in the following ways,

        *) By environment variables (User/System variables).
        *) By OS Settings.
        *) By using command console input explicitly.
        *) Present/missing files.
        *) Through maven settings.

20) What does Maven help with?

   Maven helps with the following:

    *) Apache Maven helps manage all the processes, such as building, documentation, releasing, and distribution in 
       project management.
    *) The tool simplifies the process of project building. It increases the performance of the project and the 
       building process.
    *) The task of downloading JAR files and other dependencies is done automatically.
    *) Maven provides easy access to all the required information.
    *) Maven makes it easy for the developer to build a project in different environments, without worrying about the 
      dependencies, processes, etc.
    *) In Maven, it is simple to add new dependencies, all you need to do is to write the dependency code in the pom file.

21) What are the different elements that Maven takes care of?

      In the process, it takes care of the following:

           *) Builds
           *) Dependencies
           *) Reports 
           *) Distribution
           *) Releases
           *) Mailing list

22) What is POM?

  Project Object Model (POM) refers to the XML files with all the information regarding project and configuration details.

    *) It has the description of the project, information regarding the versioning and configuration management of the project.
    *) The XML file is in the project home directory. When we tend to execute a task, Maven searches for the POM in the
       current directory.

23) What all is included in the POM?

    POM contains the following configurations

             *) Dependencies
             *) Developers and contributors
             *) Plugins
             *) Plugin configuration
             *)  Resources 
24) What are the minimum required elements for POM? 

        The minimum required elements for POM are

            *) project root
            *) modelVersion – should be 4.0.0
            *) groupId – project’s group id
            *) artifactId – artifact (project) id
            *) version – version of the artifact 

25) What is meant by the term ‘Build Tool’?

    A build tool is essential for the process of building. It is needed for the following procedures:

          *) Generating source code.
          *) Generating documentation from the source code.
          *) Compiling of source code.
          *) Packaging of the compiled codes into JAR files.
          *) Installing the packaged code in a local repository, server, or central repository.

26) What is the command to install JAR files in the Local Repository? 

    *)  $ mvn install is used to install JAR files in the local repository.
    *)  To install the JAR manually into the local Maven repository, the following plugin is used: 
        mvn install:install-file-Dfile=<path to file>

27) What is Clean, Default, and Site in Maven?

     There are three built-in build life cycles

   *) Clean: The clean lifecycle looks after project cleaning.
   *) Default: The default lifecycle handles the project deployment.
   *) Site: The site lifecycle refers to the creation of the project’s site documentation.

28) How does Maven Architecture work?

   Maven architecture works in three steps, which are as follows

     *) The first step is to read the pom.xml file.
     *) Then, it downloads the dependencies defined in pom.xml into the local repository from the central repository.
     *) Lastly, it creates and generates a report according to the requirements, and executes life-cycles, phases,
        goals, plugins, etc

29) What are the different conventions used while naming a project in Maven? 

    The full name of a project in Maven includes

     <GroupId>: <artifactId>: <version>
      For example:
      org.apache.maven: maven: 2.0.1

30)  What is a Maven Artifact?

    *) Maven Artifact refers to a file, usually a JAR that gets deployed to a Maven repository. The tool creates one or more artifacts, 
       such as a compiled JAR and a source JAR.
    *) Every artifact has its groupID, an artifact ID, and a version string. These three together identify the artifact. 
        For example:
        com.your.package, any name, and a version string (to uniquely identify).

31) What are the phases of a Clean Life Cycle?

     The phases of a clean life cycle include

        *) Pre-clean
        *) Clean
        *) Post-clean

32) What are the phases of a Site Life Cycle?

     The phases of a site life cycle include

         *) Pre-site
         *) Site
         *) Post-site
         *) Site-deploy

33) Why are Maven Plugins used?

     Maven Plugins are used to 

         *) Create a JAR file.
         *) Create a WAR file.
         *) Compile code files.
         *) Unit testing of code.
         *) Create project documentation.
         *) Create project reports.

34) When should one use Maven?

    The Maven Build Tool can be used in the following conditions

     *) When the project has a large number of dependencies. Then, using Maven, you can easily manage those dependencies.
     *) When the version of a dependency changes frequently. To update dependencies, simply update the version ID in the pom file.
     *) Maven makes it simple to handle continuous builds, integration, and testing.
     *) When you need a quick way to generate documentation from source code, this is the tool you use. It helps in compiling source code, 
        and then packaging it into JAR or ZIP files.

35) Discuss the core concepts of Maven.

     The core concepts of Maven are

*) POM Files:-
    Project Object Model (POM) files are XML files that include information about the project and configuration information used by Maven 
     to construct the project, such as dependencies, source directory, plugin, goals, and so on. When you want to run a maven command, you 
     provide it with a POM file to run. To complete its configuration and functions, Maven reads the pom.xml file.
*) Dependencies and Repositories:-
    Repositories are folders containing bundled JAR files, and dependencies are external Java libraries necessary for Project. The local 
    repository is simply a folder on your computer's hard drive. Maven retrieves dependencies from a central Maven repository and places 
    them in your local repository if they aren't found in the local Maven repository.
*) Build Life Cycles, Phases, and Goals:-
    A build life cycle is made up of a series of build phases, each of which contains a set of goals. A build lifecycle, phase, or goal is 
    referred to as a Maven command. When a lifecycle is asked to be run using the maven command, all of the build steps in that life cycle 
    are likewise run. When a build phase is requested to be executed, it is followed by all build phases in the given sequence.
*) Build Profiles:-
    Build Profiles are a set of configuration parameters that allow you to build your project using a variety of setups. For example,
    you might need to develop and test your project on your local computer. You can add different build profiles to your POM files
    using its profile elements to enable different builds, which can be triggered in a variety of ways.
*) Build Plugins:-
    Build Plugins are used to accomplish a certain task. A plugin can be added to the POM file. Maven comes with various
    pre-installed plugins, but you can also write your own in Java.

36) What elements are used for creating a pom.xml file?

    The following elements are necessary for creating a pom.xml file:

 *) project:- The root element of the pom.xml file is the project.
 *) modelVersion:- It identifies which version of the POM model you're working with. For Maven 2 and Maven 3, use version 4.0.0.
 *) groupId:- groupId is the project group's identifier. It is unique, and you will most likely use a group ID that is similar .
   to the project's root Java package name artifactId- It is used for naming the project you're working on.
 *) version:- The version number of the project is contained in the version element. If your project has been released in multiple 
    versions, it is helpful to list the versions.Other Pom.xml File Elements

 ## dependencies-- This element is used to establish a project's dependency list.
*) dependency:- dependency is used inside the dependencies tag to define a dependency. The groupId, artifactId, and version of 
   each dependency are listed.
*) name:- This element is used to give our Maven project a name.
*) scope:- This element is used to specify the scope of this maven project, which can include compile, runtime, test, among
   other things.
*) packaging:- The packaging element is used to package our project into a JAR, WAR, and other output formats


37) “Maven uses convention over configuration” - Why is it so?

 *)  Because developers simply need to establish a Maven project while employing convention,  Maven uses convention over configuration. 
 *)  The rest of the structure is generated automatically. In the case of configuration, build processes are to be created manually.
 *)  For setting up a project, creating artifacts, releasing code, and running unit tests, Maven has a number of conventions.

38)  In Maven, what is a snapshot?

  *) A snapshot is a specific version of a project that shows the most recent development copy of the project being worked on. Maven
    always checks out a SNAPSHOT of the project in the remote repository for each build.
  *) As a result, anytime Maven discovers a newer SNAPSHOT of the project, it downloads and replaces the project's older
    .jar file in the local repository.

39) What are the locations where Maven dependencies are stored?

   Maven saves all of the JARs, dependency files, and other things it downloads in the Maven local repository. All of the artifacts 
   are kept locally in the Maven local repository, which is a folder on the local machine.

40) 15. What are the different types of Maven build profiles? In what ways can build profiles of maven be activated?

   The different types of Maven build profiles are:

      *) Per-User: This is defined in the Maven settings.xml file.
      *) Per Project: This is defined in the project’s pom.xml.
      *) Global: This is defined in the global Maven settings.xml file.
       Maven build profiles can be activated or triggered in the following ways:

            *) Using explicit commands
            *) Maven settings
            *) On the basis of environment variables
            *) Configuration of the operating system
            *) Present/missing files

41) What do you understand about the term ‘Super POM’?

    *)Any POM file has the ability to point to its parent POM. There is a system-wide POM file that is automatically
     considered as the parent POM file if the parent POM element is absent. The super POM is the name given to this 
     POM file. Finally, the super POM is used to extend all of the application POM files. The apex of the POM 
     hierarchy is the super POM file. The super POM file contains all of the default configurations. All of the 
     configurations defined in the super POM file will be inherited by even the simplest version of a POM file. 
     You can alter any option you want by redefining the same section in your application POM file.

43) What is maven-release plugin and how does it work?

   The maven release plugin is used to automate the build and release process. When maven executes the 
   maven-release-plugin, the following activities are performed:

    *) mvn release:clean - clears the workspace from the previous build and prepares it for a new one.
    *) mvn release:rollback - If the previous process failed, it rollbacks the workspace.
    *) mvn release:prepare - It performs the following tasks:
        *) Checks the local workspace for any uncommitted files.
        *) Checks for SNAPSHOT dependencies and verifies they aren't present.
        *) Prepares the final version for release.
        *) Updates the pom to SCM (SVN/Git/Mercurial/CVS).
        *) Runs the test cases.
        *) Executes the ultimate commit to the SCM.
        *) Tags the script/code.
        *) Increases the version number and includes the SNAPSHOT as part of the subsequent releases.
 *) mvn release:perform: - 
    fetches the code from the repository and executes the maven goal to develop and deploy the artifacts.

44) What is the use of the Maven Wagon plugin?

  *) The Maven Wagon Plugin, as its name suggests, allows you to access numerous Maven Wagon functionalities, 
     To transfer resources to and from Maven repositories, Maven Wagon offers a layer of abstraction over the 
     core transport protocols. Maven Wagon's unified API includes implementations for seven transports.
  *) The plugin allows you to use the wagon to upload resources from your build to a remote site, get
     resources from a repository and list the contents of a repository. Finally, it may merge a Maven 
     repository to another in a generic fashion by merging the upload and download capabilities.

45) How is Doxia used by Maven?

  *) Doxia is a content creation framework that aims to give powerful approaches for creating static and dynamic 
     content to its users: Doxia can be used to create static web pages in a web-based publication context, as
     well as in dynamic content creation systems such as blogs, wikis, and content management systems.
  *) Maven makes substantial use of Doxia, which powers the project's complete documentation system. It enables
     Maven to take any Doxia-supported document and output it in any format.
  *) For instance, 'mvn site' is the command used by Maven to produce javadocs for a specific project. Maven 
     calls Doxia document generation and other report generating plugins when this command is run. 

46)  What is the difference between the maven package and the maven install?

    *) package:-
       converts the compiled code into a distributable format, such as a JAR.
    *) install:-
      adds the package to the local repository, allowing it to be used as a dependency in other projects.








